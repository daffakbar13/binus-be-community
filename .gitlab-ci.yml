stages:
  - build_docker
  - deploy_microk8s

build_docker:
  stage: build_docker
  image: registry.stagingapps.net/build/docker:18.09.7
  services:
    - name: registry.stagingapps.net/build/docker:18.09.7-dind
  script:
    - docker info
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" registry-v2.stagingapps.net
    - docker build -t "${CI_REGISTRY_IMAGE}:latest" .
    - docker tag "${CI_REGISTRY_IMAGE}:latest" "${CI_REGISTRY_IMAGE}:$CI_BUILD_REF"
    #- docker push "${CI_REGISTRY_IMAGE}:latest"
    - docker push "${CI_REGISTRY_IMAGE}:$CI_BUILD_REF"
  only:
    - staging
  tags:
    - new-shared

deploy_microk8s:
  stage: deploy_microk8s
  image:
    name: bitnami/kubectl:1.23
    entrypoint: ['']
  environment:
    name: stg-binus-be
  script:
    - kubectl config get-contexts
    - kubectl config use-context wgs/binus/binus-be:binus-be
    - kubectl version
    - cd manifest/
    - kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
    - |
      if kubectl get secret -n ${namespace} | grep stagingapps.net; then
          echo "already exist"
          kubectl delete secret stagingapps.net -n ${namespace}
          kubectl create secret tls stagingapps.net   --cert=stagingappsnet.ca-bundle --key=stagingappsnet.key  -n ${namespace} || exit 1
      else
         kubectl create secret tls stagingapps.net   --cert=stagingappsnet.ca-bundle --key=stagingappsnet.key -n ${namespace} || exit 1
      fi
    - |
      if kubectl get secret -n ${namespace} | grep regcred; then
          echo "already exist"
          kubectl delete secret regcred -n ${namespace}
          kubectl create secret docker-registry regcred --docker-server=registry-v2.stagingapps.net --docker-username="${CI_REGISTRY_USER}" --docker-password="${CI_REGISTRY_PASSWORD}"  -n ${namespace} || exit 1
      else
         kubectl create secret docker-registry regcred --docker-server=registry-v2.stagingapps.net --docker-username="${CI_REGISTRY_USER}" --docker-password="${CI_REGISTRY_PASSWORD}" -n ${namespace} || exit 1
      fi
    - sed -i "s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/" deployment.yaml service.yaml ingress.yaml pvc.yaml
    - sed -i "s/__CI_PROJECT_NAME__/${CI_PROJECT_NAME}/" deployment.yaml service.yaml ingress.yaml pvc.yaml
    - sed -i "s/__URL_STAGING__/${URL_STAGING}/" ingress.yaml
    - sed -i "s,__IMAGE__:__VERSION__,${CI_REGISTRY_IMAGE}:$CI_BUILD_REF," deployment.yaml
    - kubectl apply -f deployment.yaml -n ${namespace}
    - kubectl apply -f service.yaml -n ${namespace}
    - kubectl apply -f ingress.yaml -n ${namespace}
    - kubectl apply -f pvc.yaml -n ${namespace}
    - kubectl rollout status -f deployment.yaml -n ${namespace}
    - kubectl get all,ing  -n "${namespace}"
  only:
    - staging
  tags:
    - new-shared
